"use client";

import type { VariantProps } from "class-variance-authority";
import * as React from "react";
import { useClickAway, useFocusWithin } from "ahooks";
import { format as formatDate, toDate } from "date-fns";
import { useMergedState } from "rc-util";

import type { inputSizeVariants, InputVariants } from "../input";
import { cn } from "..";
import { Calendar } from "../calendar";
import { Icon } from "../icons";
import { Input } from "../input";
import { Popover } from "../popover";
import { TimeSelect } from "./time-select";

type DateType = Date | string | number | undefined | null;

export type DatePickerProps<T extends DateType = Date> = InputVariants &
  VariantProps<typeof inputSizeVariants> & {
    id?: string;
    format?: string;
    defaultValue?: T;
    value?: T;
    placeholder?: string;
    valueType?: "date" | "string" | "number" | "format";
    /** Callback function, can be executed when the selected time is changing */
    onChange?: (date: DateType) => void;
    // onChange?: (date: Date | undefined, dateString: string) => void;
    /** To provide an additional time selection **/
    showTime?: boolean;

    allowClear?: boolean;
  };
const DatePickerInternal = <T extends DateType = Date>(
  {
    id: inputId,
    borderless,
    format = "dd/MM/yyyy",
    size,
    status,
    defaultValue,
    value,
    placeholder,
    valueType,
    onChange,
    showTime,

    allowClear = false,
    ...props
  }: DatePickerProps<T>,
  ref: React.Ref<HTMLInputElement>,
) => {
  // const defaultValue: Date | undefined = propDefaultValue
  //   ? toDate(propDefaultValue)
  //   : undefined;
  // // if (propDefaultValue && typeof propDefaultValue === "string") {
  // //   defaultValue = toDate(propDefaultValue);
  // // }
  // const value: Date | undefined = propValue ? toDate(propValue) : undefined;
  // // let value: Date | undefined;
  // // if (propValue && typeof propValue === "string") {
  // //   value = toDate(propValue);
  // // }
  const [open, setOpen] = React.useState(false);
  const [month, setMonth] = React.useState<Date | undefined>(
    value ? toDate(value) : defaultValue ? toDate(defaultValue) : new Date(),
  );

  // ====================== Format Date =======================
  format = showTime ? `${format} HH:mm` : format;

  // ====================== Value =======================
  const preValue = value
    ? formatDate(toDate(value), format)
    : defaultValue
      ? formatDate(toDate(defaultValue), format)
      : "";
  const [inputValue, setInputValue] = useMergedState(preValue);

  // set input value if date value change
  React.useEffect(() => {
    const dateString = value ? formatDate(toDate(value), format) : "";
    // const x = isValid(value) ? formatDate(value!, format) : "";
    setInputValue(dateString);
    setMonth(value ? toDate(value) : new Date());
  }, [value, setInputValue, format]);

  const handleChange = (input: string | Date) => {
    const date = toDate(input);
    if (valueType === "string") {
      onChange?.(date.toISOString());
    } else if (valueType === "format") {
      onChange?.(formatDate(date, format));
    } else if (typeof valueType === "number") {
      onChange?.(date.getTime());
    } else {
      onChange?.(date);
    }
    setInputValue(formatDate(date, format));
    // const inputDate =
    //   typeof input === "string" ? parse(input, format, new Date()) : input;
    // if (isValid(inputDate)) {
    //   props.onChange?.(inputDate, formatDate(inputDate, format));
    //   setInputValue(formatDate(inputDate, format));
    //   setMonth(inputDate);
    // } else {
    //   setInputValue(preValue);
    //   props.onChange?.(undefined, "");
    // }
  };

  // handle click outside from input (is focus within)
  const [isFocused, setIsFocused] = React.useState(false);
  useFocusWithin(() => document.querySelector(`[id='${inputId}]`), {
    onFocus: () => {
      setIsFocused(true);
    },
  });

  useClickAway(
    (event) => {
      if (
        isFocused && // check if choose a day in panel or not
        !(event.target && "name" in event.target && event.target.name === "day")
      ) {
        if (inputValue.length === 10) {
          handleChange(inputValue);
        } else {
          setInputValue(preValue);
        }
      }
    },
    () => document.querySelector(`[id='${inputId}]`),
  );

  return (
    <>
      <Popover
        open={open}
        className="w-auto p-0"
        trigger="click"
        sideOffset={8}
        placement="bottomLeft"
        onInteractOutside={(event) => {
          if (
            event.target &&
            "id" in event.target &&
            event.target.id !== inputId
          ) {
            setOpen(false);
          }
        }}
        onOpenAutoFocus={(event) => {
          event.preventDefault();
        }}
        content={
          <div className="flex">
            <Calendar
              mode="single"
              selected={value ? toDate(value) : undefined}
              onSelect={(_, selectedDate) => {
                handleChange(selectedDate);
                setOpen(false);
              }}
              month={month}
              onMonthChange={setMonth}
              {...props}
            />
            {showTime && (
              <TimeSelect
                value={value ? toDate(value) : undefined}
                onChange={handleChange}
              />
            )}
          </div>
        }
      >
        <Input
          id={inputId}
          allowClear={allowClear}
          borderless={borderless}
          size={size}
          status={status}
          className={cn("items-center", "justify-start text-left")}
          ref={ref}
          placeholder={placeholder}
          suffix={
            <Icon
              icon="icon-[mingcute--calendar-2-line]"
              className="ml-auto size-4 opacity-50"
            />
          }
          value={inputValue}
          onClick={() => {
            if (!open) setOpen(true);
          }}
          onKeyUp={(event) => {
            event.stopPropagation();
            if (event.key === "Enter" || event.key === "Escape") {
              if (event.currentTarget.value.length === 10) {
                handleChange(event.currentTarget.value);
              } else {
                setInputValue(preValue);
              }
              setOpen(false);
            }
          }}
          onChange={(event) => {
            setInputValue(event.currentTarget.value);
            if (event.currentTarget.value === "") {
              // eslint-disable-next-line unicorn/no-useless-undefined
              onChange?.(undefined);
            } else if (event.currentTarget.value.length === 10) {
              handleChange(event.currentTarget.value);
            }
          }}
        />
      </Popover>
    </>
  );
};

export const DatePicker = React.forwardRef(DatePickerInternal) as <
  T extends DateType,
>(
  props: DatePickerProps<T> & {
    ref?: React.ForwardedRef<HTMLInputElement>;
  },
) => ReturnType<typeof DatePickerInternal>;
