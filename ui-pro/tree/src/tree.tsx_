import { useMergedState } from "@rc-component/util";

import type { TreeDataNode } from "./types";
import { TreeRoot } from "./_components";

type TreeProps = {
  treeData: TreeDataNode[];

  /** Expand all tree nodes by default */
  defaultExpandAll?: boolean;
  /** Expand the corresponding tree node by default */
  defaultExpandParent?: boolean;
  /** Expand the specified tree node by default */
  defaultExpandedKeys?: React.Key[];
  /** (Controlled) Expand the specified tree node */
  expandedKeys?: React.Key[];
  /** Callback function for when a treeNode is expanded or collapsed */
  onExpand?: (
    expandedKeys: React.Key[],
    // info: {
    //   // node: EventDataNode<TreeDataType>;
    //   expanded: boolean;
    //   // nativeEvent: MouseEvent;
    // },
  ) => void;

  /** (Controlled) Tree node with checked checkbox */
  checkedKeys?:
    | React.Key[]
    | { checked: React.Key[]; halfChecked: React.Key[] };
  /** Tree node with checkbox checked by default */
  defaultCheckedKeys?: React.Key[];

  /** (Controlled) Set the selected tree node */
  selectedKeys?: React.Key[];
  /** Tree node selected by default */
  defaultSelectedKeys?: React.Key[];
  selectable?: boolean;
  /** Callback function for when the user clicks a treeNode */
  onSelect?: (
    selectedKeys: React.Key[],
    e: {
      event: "select";
      selected: boolean;
      // node: EventDataNode<TreeDataType>;
      // selectedNodes: TreeDataType[];
      // nativeEvent: MouseEvent;
    },
  ) => void;
};
const Tree = ({
  treeData,
  expandedKeys: expandedKeysProp,
  defaultExpandedKeys,
  onExpand,
}: TreeProps) => {
  // =========================== Expanded ===========================
  const [expandedKeys, setExpandedKeys] = useMergedState(
    defaultExpandedKeys ?? [],
    {
      value: expandedKeysProp,
      onChange: (value) => {
        onExpand?.(value);
      },
    },
  );

  return (
    <ul data-slot="tree-root" role="tree">
      {treeData.map()}
      <TreeList></TreeList>
    </ul>
  );
};

export { Tree };
